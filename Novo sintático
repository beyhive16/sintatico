package autom;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Funcoes {

    private static int incr;
    private Tokens pal;
    private Tokens vez;
    private List<Tokens> tokens = new ArrayList<>();
    private List<Character> entrada;
    List<Character> tokenTEMP = new ArrayList<>();
    List<String> identificadores = new ArrayList<>();
    List<String> digitos = new ArrayList<>();
    List<String> simbolos = new ArrayList<>();
    List<String> proibidas = new ArrayList<>();

    public void setAmbiente(List<Character> StringTXT, List<String> reservadas) throws IOException {
        this.entrada = StringTXT;
        this.proibidas = reservadas;
        this.incr = 0;
        //this.pal.setConteudo("");
        vez = obter_token();
        //Tokens teste = new Tokens();
        
        System.out.println(">>>>>>>>>>>>>>>>>>>>>> "+vez.getConteudo());
        while (this.getIncr() < this.entrada.size()) {

            System.out.println("lido:" + obter_token().getConteudo());
        }
    }

    public Tokens obter_token() throws IOException {
        boolean a;
        int estado = 0;
        System.out.println("ta no: "+ this.entrada.get(getIncr()));
        thd:
        while (this.getIncr() < this.entrada.size()) {
            //System.out.println("voltou");
            switch (estado) {
                case 0:
                    if (Character.isLetter(this.entrada.get(getIncr()))) {
                        //System.out.println("entrou");
                        estado = 1;
                    } else if (Character.isDigit(this.entrada.get(getIncr()))) {
                        estado = 2;
                    } else if (this.entrada.get(getIncr()) == ';' || this.entrada.get(getIncr()) == '.'
                            || this.entrada.get(getIncr()) == '+' || this.entrada.get(getIncr()) == '('
                            || this.entrada.get(getIncr()) == ')' || this.entrada.get(getIncr()) == '<'
                            || this.entrada.get(getIncr()) == '>' || this.entrada.get(getIncr()) == ':'
                            || this.entrada.get(getIncr()) == '=' || this.entrada.get(getIncr()) == '{'
                            || this.entrada.get(getIncr()) == '}' || this.entrada.get(getIncr()) == '*') {
                        estado = 3;
                        System.out.println("entrou");
                    } else if (this.entrada.get(getIncr()) == ',' || this.entrada.get(getIncr()) == '-') {
                        estado = 4;
                    } else if (this.entrada.get(getIncr()) == '@' || this.entrada.get(getIncr()) == '/') {
                        estado = 5;
                    } else if (this.entrada.get(getIncr()) == ' ' || this.entrada.get(getIncr()) == '\n'
                            || this.entrada.get(getIncr()) == '\t') {
                        setIncr(getIncr() + 1);
                    } else {
                        System.out.println("BREAK! Caractere não reconhecido: " + this.entrada.get(getIncr()));
                        break thd;
                    }
                    break;
                case 1:
                    if (Character.isLetter(this.entrada.get(getIncr()))) {
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        setIncr(getIncr() + 1);
                        boolean duoarroba = false;
                        //boolean permitidoarroba = true;
                        nome:
                        while (true) {
                            if (Character.isLetter(this.entrada.get(getIncr())) || Character.isDigit(this.entrada.get(getIncr()))) {
                                this.tokenTEMP.add(this.entrada.get(getIncr()));
                            } else if (this.entrada.get(getIncr()) == '_') {
                                estado = 4;
                                //permitidoarroba = false;
                                break nome;
                            } else if (this.entrada.get(getIncr()) == '@') {
                                this.tokenTEMP.add(this.entrada.get(getIncr()));
                                setIncr(getIncr() + 1);
                                if ((this.entrada.get(getIncr()) == '@')) {
                                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                                    duoarroba = true;
                                } else {
                                    setIncr(getIncr() - 1);
                                }
                            } else {
                                estado = 0;
                                boolean retorno;
                                if (!verifica(this.pal, this.tokenTEMP, this.proibidas)) {
                                    retorno = adicionar(this.pal, this.tokenTEMP, this.identificadores, duoarroba);
                                    if (!retorno) {
                                        System.out.println("BREAK! Identificador inválido");
                                        break thd;
                                    }
                                }
                                setIncr(getIncr() + 1);
                                //System.out.println(getIncr());
                                duoarroba = false;
                                break thd;

                            }

                            setIncr(getIncr() + 1);
                        }
                        duoarroba = false;
                        //permitidoarroba=true;
                    }

                    break;
                case 2:
                    if (Character.isDigit(this.entrada.get(getIncr()))) {
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        setIncr(getIncr() + 1);
                        nome:
                        while (true) {
                            if (Character.isDigit(this.entrada.get(getIncr()))) {
                                this.tokenTEMP.add(this.entrada.get(getIncr()));
                            } else if (Character.isLetter(this.entrada.get(getIncr())) || this.entrada.get(getIncr()) == '@') {
                                estado = 1;
                                break nome;
                            } else {
                                validaDigito(this.pal, this.tokenTEMP, this.digitos);
                                estado = 0;
                                setIncr(getIncr() + 1);
                                break thd;
                            }
                            setIncr(getIncr() + 1);
                        }

                    }
                    break;
                case 3:
                    if (null != this.entrada.get(getIncr())) switch (this.entrada.get(getIncr())) {
                case '>':
                case ':':
                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                    setIncr(getIncr() + 1);
                    if (this.entrada.get(getIncr()) == '=') {
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        idOperador(this.pal, this.tokenTEMP, this.simbolos);
                        estado = 0;
                        setIncr(getIncr() + 1);
                        break thd;
                    } else {
                        idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                        estado = 0;
                        setIncr(getIncr() + 1);
                        break thd;
                    }
                case '<':
                    //System.out.println("anterior: "+entrada.get(incr-1));
                    //System.out.println("achou o <");
                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                    setIncr(getIncr() + 1);
                    if (this.entrada.get(getIncr()) == '=' || this.entrada.get(getIncr()) == '>') {
                        //System.out.println("achou o "+entrada.get(incr));
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        idOperador(this.pal, this.tokenTEMP, this.simbolos);
                        estado = 0;
                        setIncr(getIncr() + 1);
                        break thd;
                    } else {
                        //System.out.println("entrou no else no "+entrada.get(incr));
                        idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                        estado = 0;
                        //incr++;
                        break thd;
                    }
                case '.':
                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                    setIncr(getIncr() + 1);
                    if (this.entrada.get(getIncr()) == '*') {
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        idOperador(this.pal, this.tokenTEMP, this.simbolos);
                        estado = 0;
                        setIncr(getIncr() + 1);
                        break thd;
                    } else {
                        idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                        estado = 0;
                        setIncr(getIncr() + 1);
                        break thd;
                    }
                case '(':
                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                    setIncr(getIncr() + 1);
                    if (this.entrada.get(getIncr()) == '*') {
                        nome:
                        while (true) {
                            setIncr(getIncr() + 1);
                            //pos = incr + 1;
                            if (this.entrada.get(getIncr()) == '*') {
                                setIncr(getIncr() + 1);
                                if (this.entrada.get(getIncr()) == ')') {
                                    System.out.println("comentario de muitas linhas");
                                    break nome;
                                }
                            }
                            if (getIncr() == this.entrada.size() - 1) {
                                System.out.println("fim do programa! Final do comentário nao encontrado");;
                                break thd;
                            }
                        }
                        this.tokenTEMP.clear();
                        setIncr(getIncr() + 1);
                        estado = 0;
                    } else {
                        idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                        setIncr(getIncr() + 1);
                        estado = 0;
                        break thd;
                    }
                    break;
                default:
                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                    idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                    estado = 0;
                    setIncr(getIncr() + 1);
                    break thd;
            }
                case 4:
                    if (this.entrada.get(getIncr()) == '-') {
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        setIncr(getIncr() + 1);
                        if (Character.isDigit(this.entrada.get(getIncr()))) {
                            this.tokenTEMP.add(this.entrada.get(getIncr()));
                            setIncr(getIncr() + 1);
                            nome:
                            while (true) {
                                if (Character.isDigit(this.entrada.get(getIncr()))) {
                                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                                } else if (this.entrada.get(getIncr()) == ',') {
                                    estado = 4;
                                    break nome;
                                } else {
                                    estado = 0;
                                    setIncr(getIncr() + 1);
                                    validaDigito(this.pal, this.tokenTEMP, this.digitos);
                                    break thd;
                                }
                                setIncr(getIncr() + 1);
                            }
                        } else if (this.entrada.get(getIncr()) == '-') {
                            System.out.println("cadeia invalida por repeticao");
                            estado = 0;
                            setIncr(getIncr() + 1);
                            break thd;
                        } else {
                            idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                            setIncr(getIncr() + 1);
                            estado = 0;
                            break thd;
                        }
                    } else if (this.entrada.get(getIncr()) == ',') {
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        setIncr(getIncr() + 1);
                        if (Character.isDigit(this.entrada.get(getIncr()))) {
                            this.tokenTEMP.add(this.entrada.get(getIncr()));
                            setIncr(getIncr() + 1);
                            nome:
                            while (true) {
                                if (Character.isDigit(this.entrada.get(getIncr()))) {
                                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                                } else if (this.entrada.get(getIncr()) == ',') {
                                    estado = 4;
                                    break nome;
                                } else {
                                    estado = 0;
                                    setIncr(getIncr() + 1);
                                    validaDigito(this.pal, this.tokenTEMP, this.digitos);
                                    break thd;
                                }
                                setIncr(getIncr() + 1);
                            }
                        } else if (this.entrada.get(getIncr()) == ',') {
                            System.out.println("cadeia invalida por repeticao");
                            estado = 0;
                            setIncr(getIncr() + 1);
                            break thd;

                        } else {
                            idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                            setIncr(getIncr() + 1);
                            estado = 0;
                            break thd;
                        }
                    } else if (this.entrada.get(getIncr()) == '_') {
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        setIncr(getIncr() + 1);
                        if (Character.isLetter(this.entrada.get(getIncr()))) {
                            this.tokenTEMP.add(this.entrada.get(getIncr()));
                            setIncr(getIncr() + 1);
                            nome:
                            while (true) {
                                if (Character.isLetter(this.entrada.get(getIncr()))) {
                                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                                } else if (this.entrada.get(getIncr()) == '_') {
                                    estado = 4;
                                    break nome;
                                } else if (this.entrada.get(getIncr()) == '@') {
                                    System.out.println("BREAK! Identificador invalido: @");
                                    break thd;
                                } else {
                                    estado = 0;
                                    boolean retorno;
                                    retorno = adicionar(this.pal, this.tokenTEMP, this.identificadores, false);
                                    if (!retorno) {
                                        System.out.println("BREAK! Identificador inválido");
                                        break thd;
                                    }
                                    setIncr(getIncr() + 1);
                                    break thd;
                                }
                                setIncr(getIncr() + 1);
                            }
                        } else if (this.entrada.get(getIncr()) == '_') {
                            System.out.println("cadeia invalida por repeticao");
                            estado = 0;
                            setIncr(getIncr() + 1);
                            break thd;

                        } else {
                            idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                            setIncr(getIncr() + 1);
                            estado = 0;
                            break thd;
                        }
                    }
                    break;
                case 5:
                    if (this.entrada.get(getIncr()) == '@') {
                        //System.out.println("achou o 1º @");
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        setIncr(getIncr() + 1);
                        if (this.entrada.get(getIncr()) == '@') {
                            //System.out.println("achou o 2º @");
                            setIncr(getIncr() + 1);
                            nome:
                            while (this.entrada.get(getIncr()) != '\n') {
                                //System.out.println("ta no while no: " + entrada.get(incr));
                                setIncr(getIncr() + 1);
                            }
                            System.out.println("comentario de uma linha");
                            this.tokenTEMP.clear();
                            setIncr(getIncr() + 1);
                            estado = 0;
                        } else if (Character.isLetter(this.entrada.get(getIncr()))) {
                            this.tokenTEMP.add(this.entrada.get(getIncr()));
                            setIncr(getIncr() + 1);
                            nome:
                            while (true) {
                                if (Character.isLetter(this.entrada.get(getIncr()))) {
                                    this.tokenTEMP.add(this.entrada.get(getIncr()));
                                } else if (this.entrada.get(getIncr()) == '_') {
                                    estado = 4;
                                    break nome;
                                } else if (this.entrada.get(getIncr()) == '@') {
                                    estado = 5;
                                    break nome;
                                } else {
                                    estado = 0;
                                    boolean retorno;
                                    retorno = adicionar(this.pal, this.tokenTEMP, this.identificadores, false);
                                    if (!retorno) {
                                        System.out.println("BREAK! Identificador inválido");
                                        break thd;
                                    }
                                    setIncr(getIncr() + 1);
                                    break thd;
                                }
                                setIncr(getIncr() + 1);
                            }

                        } else {
                            idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                            setIncr(getIncr() + 1);
                            estado = 0;
                            break thd;
                        }
                    } else if (this.entrada.get(getIncr()) == '/') {
                        this.tokenTEMP.add(this.entrada.get(getIncr()));
                        setIncr(getIncr() + 1);
                        boolean continua = true;
                        if (this.entrada.get(getIncr()) == '/') {
                            nome:
                            while (true) {
                                setIncr(getIncr() + 1);
                                //pos = incr + 1;
                                if (this.entrada.get(getIncr()) == '/') {
                                    setIncr(getIncr() + 1);
                                    if (this.entrada.get(getIncr()) == '/') {
                                        System.out.println("comentario de muitas linhas");
                                        continua = false;
                                        break nome;
                                    }
                                }
                                if (getIncr() == this.entrada.size() - 1 && continua == true) {
                                    System.out.println("fim do programa! Final do comentário nao encontrado");
                                    break thd;
                                }
                            }
                            this.tokenTEMP.clear();
                            setIncr(getIncr() + 1);
                            estado = 0;
                        } else if (this.entrada.get(getIncr()) == '-') {
                            this.tokenTEMP.add(this.entrada.get(getIncr()));
                            idOperador(this.pal, this.tokenTEMP, this.simbolos);
                            estado = 0;
                            setIncr(getIncr() + 1);
                            break thd;
                        } else {
                            idSimbol(this.pal, this.tokenTEMP, this.simbolos);
                            setIncr(getIncr() + 1);
                            estado = 0;
                            break thd;
                        }
                    }
                    break;
            }
        }
        return this.pal;
    }

    public boolean verifica(Tokens pal, List<Character> tokenTEMP, List<String> proibidas) throws IOException {
        String texto = "";
        for (Character c : tokenTEMP) {
            //System.out.println("char: " + c);
            texto += c;
        }
        if (proibidas.contains(texto)) {
            System.out.println(texto + " é palavra reservada");
            tokenTEMP.clear();
            return true;
        }
        Tokens obj = new Tokens();
        obj.setTipo("PReservada");
        obj.setConteudo(texto);
        pal = obj;

        return false;
    }

    public boolean adicionar(Tokens pal, List<Character> tokenTEMP, List<String> identificadores, boolean flag) throws IOException {
        String texto = "";
        int cont = 0;
        int i = 0;
        boolean retorno = true;
        boolean valido = true;
        for (Character palavra : tokenTEMP) {
            texto += palavra;
            if (palavra == '_') {
                if (i != 1) {
                    valido = false;
                }
                cont++;
            }
            i++;
        }
        if ((Character.isLetter(tokenTEMP.get(0)) && flag == false) && (Character.isLetter(tokenTEMP.get(tokenTEMP.size() - 1)) && cont <= 1) && (valido == true)) {
            identificadores.add(texto);
            System.out.println(texto + " é identificador");
        } else {
            //System.out.println(texto+" não é identificador");
            retorno = false;
        }
        flag = true;
        valido = true;
        tokenTEMP.clear();
        Tokens obj = new Tokens();
        obj.setTipo("Identificador");
        obj.setConteudo(texto);
        pal = obj;
        return retorno;
    }

    public void validaDigito(Tokens pal, List<Character> tokenTEMP, List<String> digitos) throws IOException {
        String texto = "";
        for (Character palavra : tokenTEMP) {
            texto += palavra;
        }
        digitos.add(texto);
        System.out.println(texto + " é digito");
        tokenTEMP.clear();
        Tokens obj = new Tokens();
        obj.setTipo("Digito");
        obj.setConteudo(texto);
        pal = obj;
    }

    public void idSimbol(Tokens pal, List<Character> tokenTEMP, List<String> simbolos) throws IOException {
        String texto = "";
        for (Character palavra : tokenTEMP) {
            texto += palavra;
        }
        if (!Character.isLetter(tokenTEMP.get(0)) && !Character.isDigit(tokenTEMP.get(0))) {
            simbolos.add(texto);
            System.out.println(texto + " é simbolo");
        } else {
            //System.out.println(texto+" não é identificador");
        }
        tokenTEMP.clear();
        Tokens obj = new Tokens();
        obj.setTipo("Simbolo");
        obj.setConteudo(texto);
        pal = obj;
    }

    public void idOperador(Tokens pal, List<Character> tokenTEMP, List<String> simbolos) throws IOException {
        String texto = "";
        for (Character palavra : tokenTEMP) {
            texto += palavra;
        }
        simbolos.add(texto);
        System.out.println(texto + " é operador");
        tokenTEMP.clear();
        Tokens obj = new Tokens();
        obj.setTipo("Operador");
        obj.setConteudo(texto);
        pal = obj;
    }

    public List<Tokens> getTokens() {
        return tokens;
    }

    public void setTokens(Tokens obj) {
        this.tokens.add(obj);
    }

    public int getIncr() {
        return incr;
    }

    public void setIncr(int incr) {
        this.incr = incr;
    }
/////////////////////////////////////////////////// FUNCOES DO SINTATICO

    public void Sintatico() throws IOException {
        Tokens obj = new Tokens();
        obj = obter_token();
        if (!obj.getConteudo().equals("programa")) {
            System.out.println("BREAK! 'programa' não encontrado");
            return;
        }
        obj = obter_token();
        if (!obj.getTipo().equals("Identificador")) {
            System.out.println("BREAK! Identificador não encontrado");
            return;
        }
        obj = obter_token();
        if (!obj.getConteudo().equals(";")) {
            System.out.println("BREAK! ';' não encontrado");
            return;
        }
        obj = obter_token();
        bloco(obj);
        obj = obter_token();
        if (!obj.getConteudo().equals(".")) {
            System.out.println("BREAK! '.' não encontrado");
            return;
        }
    }

    public void bloco(Tokens obj) throws IOException {
        if (obj.getConteudo().equals("tipo")) {
            declara_tipo(obj);
        }
        if (obj.getConteudo().equals("var")) {
            declara_var(obj);
        }
        while (obj.getConteudo().equals("procedimento") || obj.getConteudo().equals("funcao")) {
            if (obj.getConteudo().equals("procedimento")) {
                declara_procedimento(obj);
            } else {
                declara_funcao(obj);
            }
        }
        if (obj.getConteudo().equals("inicio")) {
            comando_composto(obj);
        } else {
            System.out.println("BREAK! 'inicio' não encontrado");
            return;
        }
    }

    public void declara_procedimento(Tokens obj) throws IOException {
        obj = obter_token();
        if (!obj.getTipo().equals("Identificador")) {
            System.out.println("BREAK! Identificador não encontrado");
            return;
        }
        obj = obter_token();
        if (obj.getConteudo().equals("var") || obj.getTipo().equals("Identificador")) {
            parametros_formais(obj);
            obj = obter_token();
        }
        if (!obj.getConteudo().equals(";")) {
            System.out.println("BREAK! ';' não encontrado");
            return;
        }
        obj = obter_token();
        bloco(obj);
    }

    public void declara_funcao(Tokens obj) throws IOException {
        obj = obter_token();
        if (!obj.getTipo().equals("Identificador")) {
            System.out.println("BREAK! Identificador não encontrado");
            return;
        }
        obj = obter_token();
        if (obj.getConteudo().equals("var") || obj.getTipo().equals("Identificador")) {
            parametros_formais(obj);
        }
        obj = obter_token();
        if (!obj.getConteudo().equals(":")) {
            System.out.println("BREAK! ':' não encontrado");
            return;
        }
        obj = obter_token();
        if (!obj.getTipo().equals("Identificador")) {
            System.out.println("BREAK! Identificador não encontrado");
            return;
        }
        obj = obter_token();
        if (!obj.getConteudo().equals(";")) {
            System.out.println("BREAK! ';' não encontrado");
            return;
        }
        bloco(obj);
    }

    public void declara_tipo(Tokens obj) throws IOException {
        obj = obter_token();
        do {
            if (!obj.getTipo().equals("Identificador")) {
                System.out.println("BREAK! Identificador não encontrado");
                return;
            }
            obj = obter_token();
            if (!obj.getConteudo().equals("=")) {
                System.out.println("BREAK! '=' não encontrado");
                return;
            }
            obj = obter_token();
            if (!obj.getTipo().equals("Identificador")) {
                System.out.println("BREAK! Identificador não encontrado");
                return;
            }
            obj = obter_token();
            if (!obj.getConteudo().equals(";")) {
                System.out.println("BREAK! ';' não encontrado");
                return;
            }
            obj = obter_token();
        } while (obj.getTipo().equals("Identificador"));
    }

    public void declara_var(Tokens obj) throws IOException {
        obj = obter_token();
        do {
            if (!obj.getTipo().equals("Identificador")) {
                System.out.println("BREAK! Identificador não encontrado");
                return;
            }
            lista_identificadores(obj);
            if (!obj.getConteudo().equals(":")) {
                System.out.println("BREAK! ':' não encontrado");
                return;
            }
            obj = obter_token();
            if (!obj.getTipo().equals("Identificador")) {
                System.out.println("BREAK! Identificador não encontrado");
                return;
            }
            obj = obter_token();
            while (obj.getConteudo().equals(";")) {
                obj = obter_token();
                lista_identificadores(obj);
                if (!obj.getConteudo().equals(":")) {
                    System.out.println("BREAK! ':' não encontrado");
                    return;
                }
                obj = obter_token();
                if (!obj.getTipo().equals("Identificador")) {
                    System.out.println("BREAK! Identificador não encontrado");
                    return;
                }
                obj = obter_token();
            }
            if (!obj.getConteudo().equals(";")) {
                System.out.println("BREAK! ';' não encontrado");
                return;
            }
            obj = obter_token();
        } while (obj.getTipo().equals("Identificador"));
    }

    private void parametros_formais(Tokens obj) throws IOException {
        do {
            if (obj.getTipo().equals("Identificador")) {
                do {
                    obj = obter_token();
                } while (obj.getTipo().equals("Identificador") || obj.getConteudo().equals(","));
            }
            //obj = mainFunction();
            if (!obj.getConteudo().equals(":")) {
                System.out.println("BREAK! ':' não encontrado");
                return;
            }
            obj = obter_token();
            if (!obj.getTipo().equals("Identificador")) {
                System.out.println("BREAK! Identificador não encontrado");
                return;
            }
            obj = obter_token();
            if (!obj.getConteudo().equals(";")) {
                System.out.println("BREAK! ';' não encontrado");
                return;
            }
            obj = obter_token();
        } while (obj.getTipo().equals("Identificador") || obj.getConteudo().equals("var") || obj.getConteudo().equals(";"));
    }

    private void comando_composto(Tokens obj) throws IOException {
        obj = obter_token();
        //do {
        comando_sem_rotulo(obj);
        obj = obter_token();
        if (!obj.getConteudo().equals(";")) {
            System.out.println("BREAK! ';' não encontrado");
            return;
        }
        while (!obj.getConteudo().equals("fim")) {
            comando_sem_rotulo(obj);
            obj = obter_token();
            if (!obj.getConteudo().equals(";")) {
                System.out.println("BREAK! ';' não encontrado");
                return;
            }
            obj = obter_token();
        }
        obj = obter_token();
        //} while (obj.getTipo().equals("Identificador") || !obj.getConteudo().equals("fim"));
    }

    private void comando_sem_rotulo(Tokens obj) throws IOException {
        if (obj.getTipo().equals("Identificador")) {
            obj = obter_token();
            if (obj.getConteudo().equals(":=")) {
                comando_atribuicao(obj);
                obj = obter_token();
            } else if (obj.getConteudo().equals("(")) {
                chamada_procedimento(obj);
                obj = obter_token();
            }
        }
        if (obj.getConteudo().equals("se")) {
            comando_condicional(obj);
        }
        if (obj.getConteudo().equals("enquanto")) {
            comando_repetitivo(obj);
        }
        if (obj.getConteudo().equals("leia")) {
            comando_leia(obj);
        }
        if (obj.getConteudo().equals("imprima")) {
            comando_imprima(obj);
        }
    }

    private void comando_atribuicao(Tokens obj) throws IOException {
        if (!obj.getConteudo().equals(":=")) {
            System.out.println("BREAK! ':=' não encontrado");
            return;
        }
        obj = obter_token();
        expressao(obj);
    }

    private void chamada_procedimento(Tokens obj) throws IOException {
        obj = obter_token();
        lista_expressao(obj);
        if (!obj.getConteudo().equals(")")) {
            System.out.println("BREAK! ')' não encontrado");
            return;
        }
    }

    private void comando_condicional(Tokens obj) throws IOException {
        obj = obter_token();
        expressao(obj);
        obj = obter_token();
        if (!obj.getConteudo().equals("entao")) {
            System.out.println("BREAK! 'entao' não encontrado");
            return;
        }
        obj = obter_token();
        comando_sem_rotulo(obj);
        obj = obter_token();
        if (obj.getConteudo().equals("senao")) {
            obj = obter_token();
            comando_sem_rotulo(obj);
        }
    }

    private void comando_repetitivo(Tokens obj) throws IOException {
        obj = obter_token();
        expressao(obj);
        obj = obter_token();
        if (!obj.getConteudo().equals("do")) {
            System.out.println("BREAK! 'do' não encontrado");
            return;
        }
        obj = obter_token();
        comando_sem_rotulo(obj);
    }

    private void comando_leia(Tokens obj) throws IOException {
        obj = obter_token();
        if (obj.getConteudo().equals("(")) {
            obj = obter_token();
            lista_identificadores(obj);
        } else {
            System.out.println("BREAK! '(' não encontrado");
            return;
        }
        if (!obj.getConteudo().equals(")")) {
            System.out.println("BREAK! ')' não encontrado");
            return;
        }
    }

    private void comando_imprima(Tokens obj) throws IOException {
        obj = obter_token();
        if (obj.getConteudo().equals("(")) {
            obj = obter_token();
            while (obj.getConteudo().equals(","));
            {
                obj = obter_token();
                if (!obj.getTipo().equals("Identificador")) {
                    System.out.println("BREAK! 'Identificador' não encontrado");
                    return;
                }
                obj = obter_token();
            }
        } else {
            System.out.println("BREAK! '(' não encontrado");
            return;
        }
        if (!obj.getConteudo().equals(")")) {
            System.out.println("BREAK! ')' não encontrado");
            return;
        }

    }

    private void fator(Tokens obj) throws IOException {
        if (obj.getTipo().equals("Identificador")) {
            obj = obter_token();
            if (obj.getConteudo().equals("(")) {
                lista_expressao(obj);
                obj = obter_token();
                if (!obj.getConteudo().equals(")")) {
                    System.out.println("BREAK! ')' não encontrado");
                    return;
                }
            } else {
                System.out.println("BREAK! '(' não encontrado");
                return;
            }
        }

        if (obj.getTipo().equals("Digito")) {
            numeros(obj);
        }

    }

    private void numeros(Tokens obj) throws IOException {
        do {
            obj = obter_token();
        } while (obj.getTipo().equals("Digito"));
    }

    private void expressao(Tokens obj) throws IOException {
        expressao_simples(obj);
        obj = obter_token();
        if (obj.getConteudo().equals("=") || obj.getConteudo().equals("<>") || obj.getConteudo().equals("<") || obj.getConteudo().equals("<=") || obj.getConteudo().equals(">") || obj.getConteudo().equals(">=")) {
            obj = obter_token();
            expressao_simples(obj);
        }
    }

    private void expressao_simples(Tokens obj) throws IOException {
        if (obj.getConteudo().equals("+") || obj.getConteudo().equals("-")) {
            obj = obter_token();
        }
        termo(obj);
        while (obj.getConteudo().equals("+") || obj.getConteudo().equals("-") || obj.getConteudo().equals("ou")) {
            obj = obter_token();
            termo(obj);
            obj = obter_token();
        }
    }

    private void termo(Tokens obj) throws IOException {
        fator(obj);
        obj = obter_token();
        while (obj.getConteudo().equals("*") || obj.getConteudo().equals("div") || obj.getConteudo().equals("e")) {
            obj = obter_token();
            fator(obj);
            obj = obter_token();
        }
    }

    private void lista_expressao(Tokens obj) throws IOException {
        expressao(obj);
        obj = obter_token();
        while (obj.getConteudo().equals(";")) {
            obj = obter_token();
            expressao(obj);
            obj = obter_token();
        }
    }

    private void lista_identificadores(Tokens obj) throws IOException {
        obj = obter_token();
        while (obj.getConteudo().equals(",")) {
            obj = obter_token();
            if (!obj.getTipo().equals("Identificador")) {
                System.out.println("BREAK! 'Identificador' não encontrado");
                return;
            }
            obj = obter_token();
        }
    }

}
